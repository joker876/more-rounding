"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.approximate=exports.APPROXIMATION_UNITS=exports.roundToMultiple=exports.roundToPrecision=exports.roundFromZero=exports.roundToZero=exports.roundDown=exports.roundUp=exports.round=void 0;
/**
 * Returns the nearest integer by rounding to the nearest whole number.
 * @param number - The number to round.
 * @returns The rounded number.
 */function round(number){return Math.round(number)}exports.round=round;
/**
 * Returns the smallest integer greater than or equal to the given number.
 * @param number - The number to round up.
 * @returns The rounded number.
 */function roundUp(number){return Math.ceil(number)}exports.roundUp=roundUp;
/**
 * Returns the largest integer less than or equal to the given number.
 * @param number - The number to round down.
 * @returns The rounded number.
 */function roundDown(number){return Math.floor(number)}exports.roundDown=roundDown;
/**
 * Rounds a number towards zero.
 *
 * If the number is positive, it is rounded down. If it is negative, it is rounded up.
 * @param number - The number to round.
 * @returns The rounded number.
 */function roundToZero(number){if(number<=0)return Math.ceil(number);return Math.floor(number)}exports.roundToZero=roundToZero;
/**
 * Rounds a number away from zero.
 *
 * If the number is positive, it is rounded up. If it is negative, it is rounded down.
 * @param number - The number to round.
 * @returns The rounded number.
 */function roundFromZero(number){if(number>=0)return Math.ceil(number);return Math.floor(number)}exports.roundFromZero=roundFromZero;
/**
 * Rounds a number to a specified precision using a specified rounding mode.
 * @param number - The number to round.
 * @param precision - The number of decimal places to round to.
 * @param mode - The rounding mode to use. Defaults to 'normal'.
 * @returns The rounded number.
 */function roundToPrecision(number,precision=1,mode="normal"){precision=10**precision;switch(mode){case"normal":return round(number*precision)/precision;case"up":return roundUp(number*precision)/precision;case"down":return roundDown(number*precision)/precision;case"to_zero":return roundToZero(number*precision)/precision;case"from_zero":return roundFromZero(number*precision)/precision}}exports.roundToPrecision=roundToPrecision;
/**
 * Rounds a number to the nearest multiple of a specified value using a specified rounding mode.
 * @param number - The number to round.
 * @param multiple - The value to round to.
 * @param mode - The rounding mode to use. Defaults to 'normal'.
 * @returns The rounded number.
 */function roundToMultiple(number,multiple=1,mode="normal"){switch(mode){case"normal":return round(number/multiple)*multiple;case"up":return roundUp(number/multiple)*multiple;case"down":return roundDown(number/multiple)*multiple;case"to_zero":return roundToZero(number/multiple)*multiple;case"from_zero":return roundFromZero(number/multiple)*multiple}}exports.roundToMultiple=roundToMultiple;exports.APPROXIMATION_UNITS={k:1e3,M:1e6,B:1e9,T:1e12,Qa:1e15,Qi:1e18,Sx:1e21,Sp:1e24,Oc:1e27,No:1e30,Dc:1e33};
/**
 * Approximates a number to a smaller, more human-readable value.
 * @param {number} number The number to approximate.
 * @param {number} [precision=1] The number of decimal places to include. Defaults to `1`.
 * @param {ApproximationUnit | undefined} unit The abbreviation for the approximation unit to use. If not provided, will use the largest unit that keeps the value as `1 <= n < 1000`.
 * @param {string | undefined} locale The locale string to use when formatting the result with `toLocaleString()`. If not specified, `String()` will be used.
 * @param unitMap An object used for mapping default units to custom strings. If not specified or there is no mapping for the approximation unit, the default unit string will be used.
 * @returns The approximate value as a string with the abbreviation for the unit (specified or assumed) appended to it.
 */function approximate(number,precision=1,unit,locale,unitMap){var _a;if(!unit){const units=Object.keys(exports.APPROXIMATION_UNITS);for(let i=0;i<units.length;i++){let unit=units[i];let divider=exports.APPROXIMATION_UNITS[unit];let dividedNumber=number/divider;if(dividedNumber>=1&&dividedNumber<1e3){if(locale)return roundToPrecision(dividedNumber,precision).toLocaleString(locale)+unit;return String(roundToPrecision(dividedNumber,precision))+unit}}return String(roundToPrecision(number,precision).toLocaleString(locale))}const divider=exports.APPROXIMATION_UNITS[unit];const unitString=(_a=unitMap===null||unitMap===void 0?void 0:unitMap[unit])!==null&&_a!==void 0?_a:unit;if(locale)return roundToPrecision(number/divider,precision).toLocaleString(locale)+unitString;return String(roundToPrecision(number/divider,precision))+unitString}exports.approximate=approximate;