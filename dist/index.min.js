"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.approximate=exports.APPROXIMATION_UNITS=exports.roundToMultiple=exports.roundToPrecision=exports.roundFromZero=exports.roundToZero=exports.roundDown=exports.roundUp=exports.round=void 0;function round(number){return Math.round(number)}exports.round=round;function roundUp(number){return Math.ceil(number)}exports.roundUp=roundUp;function roundDown(number){return Math.floor(number)}exports.roundDown=roundDown;function roundToZero(number){if(number<=0)return Math.ceil(number);return Math.floor(number)}exports.roundToZero=roundToZero;function roundFromZero(number){if(number>=0)return Math.ceil(number);return Math.floor(number)}exports.roundFromZero=roundFromZero;function roundToPrecision(number,precision=1,mode="normal"){precision=10**precision;switch(mode){case"normal":return round(number*precision)/precision;case"up":return roundUp(number*precision)/precision;case"down":return roundDown(number*precision)/precision;case"to_zero":return roundToZero(number*precision)/precision;case"from_zero":return roundFromZero(number*precision)/precision}}exports.roundToPrecision=roundToPrecision;function roundToMultiple(number,multiple=1,mode="normal"){switch(mode){case"normal":return round(number/multiple)*multiple;case"up":return roundUp(number/multiple)*multiple;case"down":return roundDown(number/multiple)*multiple;case"to_zero":return roundToZero(number/multiple)*multiple;case"from_zero":return roundFromZero(number/multiple)*multiple}}exports.roundToMultiple=roundToMultiple;exports.APPROXIMATION_UNITS={k:1e3,M:1e6,B:1e9,T:1e12,Qa:1e15,Qi:1e18,Sx:1e21,Sp:1e24,Oc:1e27,No:1e30,Dc:1e33};function approximate(number,precision=1,unit,locale){if(!unit){const units=Object.keys(exports.APPROXIMATION_UNITS);for(let i=0;i<units.length;i++){let unit=units[i];let divider=exports.APPROXIMATION_UNITS[unit];let dividedNumber=number/divider;if(dividedNumber>=1&&dividedNumber<1e3){if(locale)return String(roundToPrecision(dividedNumber,precision).toLocaleString(locale))+unit;return String(roundToPrecision(dividedNumber,precision))+unit}}return String(roundToPrecision(number,precision).toLocaleString(locale))}let divider=exports.APPROXIMATION_UNITS[unit];if(locale)return String(roundToPrecision(number/divider,precision).toLocaleString(locale))+unit;return String(roundToPrecision(number/divider,precision))+unit}exports.approximate=approximate;